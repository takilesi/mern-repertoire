{"ast":null,"code":"// call functions here from users-api.js\nimport * as usersAPI from './users-api';\nexport async function signUp(userData) {\n  // Delegate the network request code to the users-api.js API module\n  // which will ultimately return a JSON Web Token (JWT)\n  const token = await usersAPI.signUp(userData, {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n\n  // Persist the \"token\"\n  localStorage.setItem('token', token);\n  // Baby step by returning whatever is sent back by the server\n  return token;\n}\nexport function getToken() {\n  // getItem returns null if there's no string\n  const token = localStorage.getItem('token');\n  if (!token) return null;\n  // Obtain the payload of the token\n  const payload = JSON.parse(atob(token.split('.')[1]));\n  // A JWT's exp is expressed in seconds, not milliseconds, so convert\n  if (payload.exp < Date.now() / 1000) {\n    // Token has expired - remove it from localStorage\n    localStorage.removeItem('token');\n    return null;\n  }\n  return token;\n}\nexport function getUser() {\n  const token = getToken();\n  // If there's a token, return the user in the payload, otherwise return null\n  return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n}","map":{"version":3,"names":["usersAPI","signUp","userData","token","headers","localStorage","setItem","getToken","getItem","payload","JSON","parse","atob","split","exp","Date","now","removeItem","getUser","user"],"sources":["/Users/douglasdeckert/PerScholas/93_RTT/mod-three/mern-infrastructure /mern-infrastructure/src/utilities/users-service.js"],"sourcesContent":["// call functions here from users-api.js\nimport * as usersAPI from './users-api'\n\nexport async function signUp(userData) {\n    // Delegate the network request code to the users-api.js API module\n    // which will ultimately return a JSON Web Token (JWT)\n    const token = await usersAPI.signUp(userData, {\n        headers:{\n            'Content-Type':'application/json'\n        },\n      });\n    \n    // Persist the \"token\"\n    localStorage.setItem('token', token);\n    // Baby step by returning whatever is sent back by the server\n    return token;\n}\n\nexport function getToken() {\n    // getItem returns null if there's no string\n    const token = localStorage.getItem('token');\n    if (!token) return null;\n    // Obtain the payload of the token\n    const payload = JSON.parse(atob(token.split('.')[1]));\n    // A JWT's exp is expressed in seconds, not milliseconds, so convert\n    if (payload.exp < Date.now() / 1000) {\n      // Token has expired - remove it from localStorage\n      localStorage.removeItem('token');\n      return null;\n    }\n    return token;\n}\n\nexport function getUser() {\n    const token = getToken();\n    // If there's a token, return the user in the payload, otherwise return null\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n}"],"mappings":"AAAA;AACA,OAAO,KAAKA,QAAQ,MAAM,aAAa;AAEvC,OAAO,eAAeC,MAAMA,CAACC,QAAQ,EAAE;EACnC;EACA;EACA,MAAMC,KAAK,GAAG,MAAMH,QAAQ,CAACC,MAAM,CAACC,QAAQ,EAAE;IAC1CE,OAAO,EAAC;MACJ,cAAc,EAAC;IACnB;EACF,CAAC,CAAC;;EAEJ;EACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;EACpC;EACA,OAAOA,KAAK;AAChB;AAEA,OAAO,SAASI,QAAQA,CAAA,EAAG;EACvB;EACA,MAAMJ,KAAK,GAAGE,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAI,CAACL,KAAK,EAAE,OAAO,IAAI;EACvB;EACA,MAAMM,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACT,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACrD;EACA,IAAIJ,OAAO,CAACK,GAAG,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE;IACnC;IACAX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChC,OAAO,IAAI;EACb;EACA,OAAOd,KAAK;AAChB;AAEA,OAAO,SAASe,OAAOA,CAAA,EAAG;EACtB,MAAMf,KAAK,GAAGI,QAAQ,CAAC,CAAC;EACxB;EACA,OAAOJ,KAAK,GAAGO,IAAI,CAACC,KAAK,CAACC,IAAI,CAACT,KAAK,CAACU,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACM,IAAI,GAAG,IAAI;AACpE"},"metadata":{},"sourceType":"module","externalDependencies":[]}