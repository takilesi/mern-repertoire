{"ast":null,"code":"import { getToken } from './users-service';\nconst BASE_URL = '/api/users';\nexport function signUp(userData) {\n  return sendRequest(BASE_URL, 'POST', userData);\n}\nexport function login(credentials) {\n  return sendRequest(`${BASE_URL}/login`, 'POST', credentials);\n}\nexport function checkToken() {\n  return sendRequest(`${BASE_URL}/check-token`);\n}\n\n/*--- Helper Functions ---*/\n\nasync function sendRequest(url, method = 'GET', payload = null) {\n  // Fetch accepts an options object as the 2nd argument\n  // used to include a data payload, set headers, etc.\n  const options = {\n    method\n  };\n  if (payload) {\n    options.headers = {\n      'Content-Type': 'application/json'\n    };\n    options.body = JSON.stringify(payload);\n  }\n  const token = getToken();\n  if (token) {\n    // Ensure the headers object exists\n    options.headers = options.headers || {};\n    // Add token to an Authorization header\n    // Prefacing with 'Bearer' is recommended in the HTTP specification\n    options.headers.Authorization = `Bearer ${token}`;\n  }\n  const res = await fetch(url, options);\n  // res.ok will be false if the status code set to 4xx in the controller action\n  if (res.ok) return res.json();\n  throw new Error('Bad Request');\n}","map":{"version":3,"names":["getToken","BASE_URL","signUp","userData","sendRequest","login","credentials","checkToken","url","method","payload","options","headers","body","JSON","stringify","token","Authorization","res","fetch","ok","json","Error"],"sources":["/Users/douglasdeckert/PerScholas/93_RTT/mod-three/mern-infrastructure /mern-infrastructure/src/utilities/users-api.js"],"sourcesContent":["import { getToken } from './users-service';\nconst BASE_URL = '/api/users';\n\nexport function signUp(userData) {\n  return sendRequest(BASE_URL, 'POST', userData);\n}\n\nexport function login(credentials) {\n  return sendRequest(`${BASE_URL}/login`, 'POST', credentials);\n}\n\nexport function checkToken() {\n  return sendRequest(`${BASE_URL}/check-token`);\n}\n\n/*--- Helper Functions ---*/\n\nasync function sendRequest(url, method = 'GET', payload = null) {\n  // Fetch accepts an options object as the 2nd argument\n  // used to include a data payload, set headers, etc.\n  const options = { method };\n  if (payload) {\n    options.headers = { 'Content-Type': 'application/json' };\n    options.body = JSON.stringify(payload);\n  }\n\n  const token = getToken();\n  if (token) {\n    // Ensure the headers object exists\n    options.headers = options.headers || {};\n    // Add token to an Authorization header\n    // Prefacing with 'Bearer' is recommended in the HTTP specification\n    options.headers.Authorization = `Bearer ${token}`;\n  }\n  const res = await fetch(url, options);\n  // res.ok will be false if the status code set to 4xx in the controller action\n  if (res.ok) return res.json();\n  throw new Error('Bad Request');\n}"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,iBAAiB;AAC1C,MAAMC,QAAQ,GAAG,YAAY;AAE7B,OAAO,SAASC,MAAMA,CAACC,QAAQ,EAAE;EAC/B,OAAOC,WAAW,CAACH,QAAQ,EAAE,MAAM,EAAEE,QAAQ,CAAC;AAChD;AAEA,OAAO,SAASE,KAAKA,CAACC,WAAW,EAAE;EACjC,OAAOF,WAAW,CAAE,GAAEH,QAAS,QAAO,EAAE,MAAM,EAAEK,WAAW,CAAC;AAC9D;AAEA,OAAO,SAASC,UAAUA,CAAA,EAAG;EAC3B,OAAOH,WAAW,CAAE,GAAEH,QAAS,cAAa,CAAC;AAC/C;;AAEA;;AAEA,eAAeG,WAAWA,CAACI,GAAG,EAAEC,MAAM,GAAG,KAAK,EAAEC,OAAO,GAAG,IAAI,EAAE;EAC9D;EACA;EACA,MAAMC,OAAO,GAAG;IAAEF;EAAO,CAAC;EAC1B,IAAIC,OAAO,EAAE;IACXC,OAAO,CAACC,OAAO,GAAG;MAAE,cAAc,EAAE;IAAmB,CAAC;IACxDD,OAAO,CAACE,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACL,OAAO,CAAC;EACxC;EAEA,MAAMM,KAAK,GAAGhB,QAAQ,CAAC,CAAC;EACxB,IAAIgB,KAAK,EAAE;IACT;IACAL,OAAO,CAACC,OAAO,GAAGD,OAAO,CAACC,OAAO,IAAI,CAAC,CAAC;IACvC;IACA;IACAD,OAAO,CAACC,OAAO,CAACK,aAAa,GAAI,UAASD,KAAM,EAAC;EACnD;EACA,MAAME,GAAG,GAAG,MAAMC,KAAK,CAACX,GAAG,EAAEG,OAAO,CAAC;EACrC;EACA,IAAIO,GAAG,CAACE,EAAE,EAAE,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;EAC7B,MAAM,IAAIC,KAAK,CAAC,aAAa,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}